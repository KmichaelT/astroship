---
import Container from "@components/container.astro";
import logo from "assets/logo.svg";
import { Picture } from "astro:assets";
import Link from "@components/ui/link.astro";

// Navigation items (used only for rendering, not in client JS)
const menuitems = [

  { title: "Scholarships", path: "/scholarship" },
  { title: "Projects", path: "/project" },
  
    {
    title: "More Services",
    path: "#",
    children: [
      { title: "Tutors", path: "/tutors" },
      { title: "Addmision Assistance", path: "#" },
      { title: "Resources and Tips", path: "#" },
    ],
  },
  { title: "About", path: "/about" },
  { title: "Contact", path: "/contact" },
];
---

<Container>
  <header class="bg-white">
    <nav aria-label="Global" class="flex items-center justify-between p-6 lg:px-8 w-full">
      <!-- Logo -->
      <div class="flex lg:flex-none">
        <a href="/" class="-m-1.5 p-1.5">
          <span class="sr-only">Your Company</span>
          <Picture
            src={logo}
            alt="Company logo"
            widths={[200, 400, 600]}
            sizes="(max-width: 800px) 100vw, 620px"
            loading="eager"
            format="avif"
            class="h-10 w-auto"
          />
        </a>
      </div>

      <!-- Mobile menu button -->
      <div class="flex lg:hidden">
        <button id="open-mobile-menu" type="button" class="-m-2.5 inline-flex items-center justify-center rounded-md p-2.5 text-gray-700">
          <span class="sr-only">Open main menu</span>
          <svg class="h-6 w-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="1.5" d="M3.75 6.75h16.5M3.75 12h16.5m-16.5 5.25h16.5" />
          </svg>
        </button>
      </div>

      <!-- Desktop navigation -->
      <div class="hidden lg:flex lg:gap-x-8 lg:items-center">
        {menuitems.map((item) =>
          item.children ? (
            <div class="relative">
              <button
                id={`${item.title}-dropdown-button`}
                class="flex items-center gap-x-1 text-sm font-semibold text-gray-900"
              >
                {item.title}
                <svg class="h-5 w-5 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="1.5" d="M19.5 8.25l-7.5 7.5-7.5-7.5" />
                </svg>
              </button>
              <div id={`${item.title}-dropdown-panel`} class="hidden absolute left-0 top-full z-10 mt-2 w-48 rounded-md bg-white shadow-lg ring-1 ring-gray-900/5">
                <div class="py-1">
                  {item.children.map((child) => (
                    <a
                      href={child.path}
                      class="block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100"
                    >
                      {child.title}
                    </a>
                  ))}
                </div>
              </div>
            </div>
          ) : (
            <a
              href={item.path}
              class="text-sm font-semibold text-gray-900 hover:text-gray-700"
            >
              {item.title}
            </a>
          )
        )}
      </div>

 

    <!-- Mobile menu (unchanged) -->
    <div id="mobile-menu" class="lg:hidden fixed inset-y-0 right-0 z-10 w-full overflow-y-auto bg-white px-6 py-6 sm:max-w-sm sm:ring-1 sm:ring-gray-900/10 hidden">
      <div class="flex items-center justify-between">
        <a href="/" class="-m-1.5 p-1.5">
          <span class="sr-only">Your Company</span>
          <Picture
            src={logo}
            alt="Company logo"
            widths={[200, 400, 600]}
            sizes="(max-width: 800px) 100vw, 620px"
            loading="eager"
            format="avif"
            class="h-8 w-auto"
          />
        </a>
        <button id="close-mobile-menu" type="button" class="-m-2.5 rounded-md p-2.5 text-gray-700">
          <span class="sr-only">Close menu</span>
          <svg class="h-6 w-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="1.5" d="M6 18L18 6M6 6l12 12" />
          </svg>
        </button>
      </div>
      <nav class="mt-6 space-y-4">
        {menuitems.map((item) =>
          item.children ? (
            <div>
              <button
                id={`mobile-${item.title}-button`}
                class="flex w-full items-center justify-between rounded-md px-3 py-2 text-base font-semibold text-gray-900 hover:bg-gray-50"
              >
                {item.title}
                <svg class="h-5 w-5 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="1.5" d="M19.5 8.25l-7.5 7.5-7.5-7.5" />
                </svg>
              </button>
              <div id={`mobile-${item.title}-panel`} class="hidden mt-2 space-y-2">
                {item.children.map((child) => (
                  <a
                    href={child.path}
                    class="block rounded-md px-6 py-2 text-base font-semibold text-gray-900 hover:bg-gray-50"
                  >
                    {child.title}
                  </a>
                ))}
              </div>
            </div>
          ) : (
            <a
              href={item.path}
              class="block rounded-md px-3 py-2 text-base font-semibold text-gray-900 hover:bg-gray-50"
            >
              {item.title}
            </a>
          )
        )}
      </nav>
    </div>
  </header>
</Container>

<!-- Inline script for toggling menus -->
<script is:inline>
  document.addEventListener('DOMContentLoaded', () => {
    // Mobile menu toggle
    const mobileMenu = document.getElementById('mobile-menu');
    document.getElementById('open-mobile-menu').addEventListener('click', () => {
      mobileMenu.classList.remove('hidden');
    });
    document.getElementById('close-mobile-menu').addEventListener('click', () => {
      mobileMenu.classList.add('hidden');
    });

    // Desktop dropdown toggles
    const dropdownButtons = document.querySelectorAll('[id$="-dropdown-button"]');
    dropdownButtons.forEach((button) => {
      const panelId = button.id.replace('-dropdown-button', '-dropdown-panel');
      const panel = document.getElementById(panelId);
      if (panel) {
        button.addEventListener('click', (e) => {
          e.stopPropagation();
          panel.classList.toggle('hidden');
        });
        // Hide dropdown when clicking outside
        document.addEventListener('click', (e) => {
          if (!button.contains(e.target) && !panel.contains(e.target)) {
            panel.classList.add('hidden');
          }
        });
      }
    });

    // Mobile dropdown toggles
    const mobileDropdownButtons = document.querySelectorAll('button[id^="mobile-"][id$="-button"]');
    mobileDropdownButtons.forEach((button) => {
      const panelId = button.id.replace('-button', '-panel');
      const panel = document.getElementById(panelId);
      if (panel) {
        button.addEventListener('click', () => {
          panel.classList.toggle('hidden');
        });
      }
    });
  });
</script>