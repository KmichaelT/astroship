---
import { getCollection } from "astro:content";
import Layout from "@layouts/Layout.astro";
import Container from "@components/container.astro";
import { Icon } from "astro-icon/components";

// Export getStaticPaths to create pages for each tutor
export async function getStaticPaths() {
  const tutorEntries = await getCollection("tutor", ({ data }) => {
    return !data.draft;
  });

  return tutorEntries.map((entry) => ({
    params: { slug: entry.slug },
    props: { entry },
  }));
}

const { entry } = Astro.props;
const { Content } = await entry.render();

// Helper function to format availability
function formatAvailability(availability) {
  return Object.entries(availability)
    .filter(([_, time]) => time)
    .map(
      ([day, time]) => `${day.charAt(0).toUpperCase() + day.slice(1)}: ${time}`
    )
    .join(", ");
}
---

<Layout title={entry.data.name}>
  <Container>
    <div class="max-w-6xl text-left mx-auto mt-14">
      <div class="grid md:grid-cols-12 gap-10 items-start">
        {/* Tutor Image and Basic Info - 4 columns (1/3) */}
        <div class="md:col-span-4">
          <img
            src={entry.data.image.src}
            alt={entry.data.image.alt}
            class="w-full rounded-lg shadow-lg"
            loading="eager"
            decoding="sync"
          />
          <div class="mt-6 space-y-4">
            <div class="flex gap-2">
              <h1 class="text-4xl font-bold">{entry.data.name}</h1>
              <span class="bg-green-100 text-green-800 px-3 py-1 rounded-full flex items-center justify-center">
                Available
              </span>
            </div>
            <p class="text-xl text-gray-600">{entry.data.title}</p>
          </div>
          {/* Contact Information */}
          <div class="mt-6">
            <h2 class="text-xl font-semibold mb-2">Contact</h2>
            <div class="space-y-2">
              <a
                href={`mailto:${entry.data.contact.email}`}
                class="flex items-center gap-2 text-gray-600 hover:text-blue-600 transition-colors">
                <Icon name="bx:envelope" class="w-5 h-5" />
                <span>{entry.data.contact.email}</span>
              </a>
              {entry.data.contact.phone && (
                <a
                  href={`tel:${entry.data.contact.phone}`}
                  class="flex items-center gap-2 text-gray-600 hover:text-blue-600 transition-colors">
                  <Icon name="bx:phone" class="w-5 h-5" />
                  <span>{entry.data.contact.phone}</span>
                </a>
              )}
            </div>
          </div>
        </div>

        {/* Tutor Details - 8 columns (2/3) */}
        <div class="md:col-span-8 space-y-8 ">
          <div class="prose prose-lg max-w-none">
            <h2 class="text-2xl font-semibold mb-4">About {entry.data.name}</h2>
            <p>{entry.data.bio}</p>
          </div>
          {/* Specialties */}
          <div>
            <h2 class="text-xl font-semibold mb-2">Specialties</h2>
            <div class="flex flex-wrap gap-2">
              {
                entry.data.specialties.map((specialty) => (
                  <span class="bg-blue-100 text-blue-800 px-3 py-1 rounded-full">
                    {specialty}
                  </span>
                ))
              }
            </div>
          </div>

          <!-- {/* Availability */}
    <div>
      <h2 class="text-xl font-semibold mb-2">Availability</h2>
      <p class="text-gray-700">{formatAvailability(entry.data.availability)}</p>
    </div> -->

          {/* Rates */}
          <!-- <div>
      <h2 class="text-xl font-semibold mb-2">Rates</h2>
      <p class="text-gray-700">Individual: {entry.data.rates.individual}</p>
      {entry.data.rates.group && 
        <p class="text-gray-700">Group: {entry.data.rates.group}</p>
      }
    </div> -->

          {/* Languages */}
          <div>
            <h2 class="text-xl font-semibold mb-2">Languages</h2>
            <div class="flex flex-wrap gap-2">
              {
                entry.data.languages.map((language) => (
                  <span class="bg-gray-100 text-gray-800 px-3 py-1 rounded-full">
                    {language}
                  </span>
                ))
              }
            </div>
          </div>


        </div>
      </div>

      <div class="grid gap-6 md:grid-cols-2 mt-14">
        {/* Credentials */}
        <div>
          <h2 class="text-xl font-semibold mb-2">Credentials</h2>
          <ul class="list-disc pl-5 space-y-1">
            {
              entry.data.credentials.map((credential) => (
                <li>{credential}</li>
              ))
            }
          </ul>
        </div>

 

        <div>
          {/* Achievements Section */}
          {
            entry.data.achievements && entry.data.achievements.length > 0 && (
              <div >
                <h2 class="text-xl font-semibold mb-2">Achievements</h2>
                <ul class="list-disc pl-5 space-y-1">
                  {entry.data.achievements.map((achievement) => (
                    <li >{achievement}</li>
                  ))}
                </ul>
              </div>
            )
          }
        </div>
      </div>

      <!-- {/* Testimonials Section */}
      {
        entry.data.testimonials && entry.data.testimonials.length > 0 && (
          <div class="mt-12">
            <h2 class="text-2xl font-semibold mb-6">Testimonials</h2>
            <div class="grid gap-6 md:grid-cols-2">
              {entry.data.testimonials.map((testimonial) => (
                <div class="bg-gray-50 p-6 rounded-lg">
                  <p class="text-gray-700 italic">"{testimonial.text}"</p>
                  <p class="mt-4 font-medium">- {testimonial.author}</p>
                </div>
              ))}
            </div>
          </div>
        )
      } -->

      {/* Rendered Content from Markdown */}
      <div class="mt-12 prose prose-lg max-w-none">
        <Content />
      </div>
    </div>
  </Container>
</Layout>
